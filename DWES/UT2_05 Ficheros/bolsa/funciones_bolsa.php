<?php
    
    /*  
        error_level	    Required. Especifica el nivel de informe de errores para el error definido por el usuario. Debe ser un número de valor. Consulte la tabla a continuación para conocer los posibles niveles de informe de errores.
        error_message	Required. Especifica el mensaje de error para el error definido por el usuario.
        error_file	    Optional. Especifica el nombre del archivo en el que ocurrió el error.
        error_line	    Optional. Especifica el número de línea en la que ocurrió el error.
        error_context	Optional. Especifica una matriz que contiene cada variable y sus valores, en uso cuando ocurrió el error.
    */
    
    /*  
        1	    E_ERROR	        A fatal run-time error. Execution of the script is stopped
        2	    E_WARNING	    A non-fatal run-time error. Execution of the script is not stopped
        8	    E_NOTICE	    A run-time notice. The script found something that might be an error, but could also happen when running a script normally
        256	    E_USER_ERROR	A fatal user-generated error. This is like an E_ERROR, except it is generated by the PHP script using the function trigger_error()
        512	    E_USER_WARNING	A non-fatal user-generated warning. This is like an E_WARNING, except it is generated by the PHP script using the function trigger_error()
        1024	E_USER_NOTICE	A user-generated notice. This is like an E_NOTICE, except it is generated by the PHP script using the function trigger_error()
        2048	E_STRICT	    Not strictly an error.
        8191	E_ALL	        All errors and warnings (E_STRICT became a part of E_ALL in PHP 5.4) 
    */
    
    function manejadorErrores($errno, $errstr, $errfile, $errline) {
        echo "<b>Error [$errno]:</b> $errstr en la línea $errline.<br>";
        return true;
    }

    set_error_handler("manejadorErrores");


    // Función para imprimir la primera línea en negrita
    function imprimirPrimeraLinea($archivo)
    {
        $primeraLinea = fgets($archivo);
        echo "<pre><b>" . htmlspecialchars($primeraLinea) . "</b></pre>";
    }


    // Funcion para buscar una plabara dentro de un archivo recorriendolo linea a linea
    function buscarPalabra($archivo, $palabra)
    {
        // Recorre las líneas restantes buscando la palabra
        while (($linea = fgets($archivo)) !== false)
        {
            // Busca la subcadena en la línea usando strstr() y si encuentra la palabra, imprime esa linea
            if (strstr($linea, $palabra))
            {
                echo "<pre>" . htmlspecialchars($linea) . "</pre>";
                break;
            }
        }
    }


    // Función para mostrar la línea encontrada
    function mostrarLinea($linea)
    {
        echo "<pre>" . htmlspecialchars($linea) . "</pre>";
    }


    function inicializarValores($linea)
    {
        return [
            'Valor' => substr($linea, 0, 22),
            'Ultimo' => substr($linea, 23, 8),
            'Var.%' => substr($linea, 32, 7),
            'Var.' => substr($linea, 40, 7),
            'Ac.% Año' => substr($linea, 48, 11),
            'MAx.' => substr($linea, 60, 8),
            'MIn.' => substr($linea, 69, 8),
            'Vol.' => substr($linea, 78, 12),
            'Capit.' => substr($linea, 91, 8),
            'Hora' => substr($linea, 100, 5)
        ];
    }

    // Función para mostrar el valor seleccionado por el usuario
    function mostrarValorSeleccionado($datos, $mostrar)
    {
        if (isset($datos[$mostrar]))
            echo "<b>$mostrar: </b>" . htmlspecialchars(trim($datos[$mostrar])) . "<br>";
        else
        /*  En un script donde los usuarios pueden ingresar datos, es útil para generar errores. 
            cuando ocurre una entrada ilegal*/
            trigger_error("Valor no encontrado.", E_USER_WARNING);
    }
?>